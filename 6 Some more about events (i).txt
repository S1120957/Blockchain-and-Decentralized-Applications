// SPDX-License-Identifier: GPL-3.0
pragma solidity >=0.4.22 <0.9.0;
contract OwnedToken {
    // `TokenCreator` is a contract type that is defined below.
    TokenCreator creator;
    address owner;
    bytes32 name;
    constructor(bytes32 name_) {
        owner = msg.sender;
        creator = TokenCreator(msg.sender);
        name = name_;
    }
    function changeName(bytes32 newName) public {
        if (msg.sender == address(creator))
            name = newName;
    }
    function transfer(address newOwner) public {
        // Only the current owner can transfer the token.
        if (msg.sender != owner) return;

        if (creator.isTokenTransferOK(owner, newOwner))
            owner = newOwner;
    }
}
contract TokenCreator {
    function createToken(bytes32 name)
        public returns (OwnedToken tokenAddress)
    {
        // Create a new `Token` contract and return its address.
        return new OwnedToken(name);
    }
    function changeName(OwnedToken tokenAddress, bytes32 name) public {
        // The external type of `tokenAddress` is simply `address`.
        tokenAddress.changeName(name);
    }
    // Perform checks if transferring a token to the OwnedToken` contract should proceed
    function isTokenTransferOK(address currentOwner, address newOwner)
        public pure returns (bool ok)
    {
        // Check an arbitrary condition to see if transfer should proceed
        return keccak256(abi.encodePacked(currentOwner, newOwner))[0] == 0x7f;
    }
}